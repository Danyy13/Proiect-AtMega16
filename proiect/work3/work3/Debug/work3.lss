
work3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060e  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000580  00000000  00000000  00000832  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000255  00000000  00000000  00000db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000317  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018f  00000000  00000000  000013fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000158a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_6>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6f 00 	call	0xde	; 0xde <main>
  64:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_6>:

void timer1_resetAfterMatch() {
	TIFR |= 1 << OCF1A;
}

ISR(TIMER1_COMPA_vect) {
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
  74:	0f 92       	push	r0
  76:	11 24       	eor	r1, r1
  78:	2f 93       	push	r18
  7a:	3f 93       	push	r19
  7c:	8f 93       	push	r24
  7e:	9f 93       	push	r25
  80:	ef 93       	push	r30
  82:	ff 93       	push	r31
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	PORTA = ~PORTA;
  8c:	8b e3       	ldi	r24, 0x3B	; 59
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	2b e3       	ldi	r18, 0x3B	; 59
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	f9 01       	movw	r30, r18
  96:	20 81       	ld	r18, Z
  98:	20 95       	com	r18
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
}
  9e:	00 00       	nop
  a0:	df 91       	pop	r29
  a2:	cf 91       	pop	r28
  a4:	ff 91       	pop	r31
  a6:	ef 91       	pop	r30
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	3f 91       	pop	r19
  ae:	2f 91       	pop	r18
  b0:	0f 90       	pop	r0
  b2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <timer1_init>:

void timer1_init() {
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= 1 << OCIE1A;
  c4:	89 e5       	ldi	r24, 0x59	; 89
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	29 e5       	ldi	r18, 0x59	; 89
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	f9 01       	movw	r30, r18
  ce:	20 81       	ld	r18, Z
  d0:	20 61       	ori	r18, 0x10	; 16
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
}
  d6:	00 00       	nop
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <main>:
int main(void) {
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = 0x03;
  e6:	8a e3       	ldi	r24, 0x3A	; 58
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	23 e0       	ldi	r18, 0x03	; 3
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
	
	TCCR1B = (1<< WGM12) | (1 << CS12);
  f0:	8e e4       	ldi	r24, 0x4E	; 78
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	2c e0       	ldi	r18, 0x0C	; 12
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
	// OCR1A = 0x7080; // 0xE100 = valoare pentru t = 1 secunda // OCR1AH L
	OCR1AH = 0x70;
  fa:	8b e4       	ldi	r24, 0x4B	; 75
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	20 e7       	ldi	r18, 0x70	; 112
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
	OCR1AL = 0x80;
 104:	8a e4       	ldi	r24, 0x4A	; 74
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	20 e8       	ldi	r18, 0x80	; 128
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
	PORTA = 2;
 10e:	8b e3       	ldi	r24, 0x3B	; 59
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	22 e0       	ldi	r18, 0x02	; 2
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
	
	timer1_init();
 118:	0e 94 5e 00 	call	0xbc	; 0xbc <timer1_init>
	sei();
 11c:	78 94       	sei
	while(1) {
		
	}
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x40>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
