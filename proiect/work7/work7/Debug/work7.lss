
work7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000340  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000340  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c02  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d0  00000000  00000000  000010de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067e  00000000  00000000  000018ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f5  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000059e  00000000  00000000  00002491  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002a2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  7a:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  82:	82 b3       	in	r24, 0x12	; 18
  84:	84 60       	ori	r24, 0x04	; 4
  86:	82 bb       	out	0x12, r24	; 18
  88:	00 c0       	rjmp	.+0      	; 0x8a <toggle_e+0x8>
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	8b 7f       	andi	r24, 0xFB	; 251
  8e:	82 bb       	out	0x12, r24	; 18
  90:	08 95       	ret

00000092 <lcd_write>:
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	66 23       	and	r22, r22
  98:	21 f0       	breq	.+8      	; 0xa2 <lcd_write+0x10>
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <lcd_write+0x16>
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	81 bb       	out	0x11, r24	; 17
  b4:	81 b3       	in	r24, 0x11	; 17
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	81 bb       	out	0x11, r24	; 17
  ba:	81 b3       	in	r24, 0x11	; 17
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	81 bb       	out	0x11, r24	; 17
  c0:	81 b3       	in	r24, 0x11	; 17
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	81 bb       	out	0x11, r24	; 17
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	8f 77       	andi	r24, 0x7F	; 127
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	8f 7b       	andi	r24, 0xBF	; 191
  d0:	82 bb       	out	0x12, r24	; 18
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	8f 7e       	andi	r24, 0xEF	; 239
  dc:	82 bb       	out	0x12, r24	; 18
  de:	cc 23       	and	r28, r28
  e0:	1c f4       	brge	.+6      	; 0xe8 <lcd_write+0x56>
  e2:	82 b3       	in	r24, 0x12	; 18
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	82 bb       	out	0x12, r24	; 18
  e8:	c6 ff       	sbrs	r28, 6
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <lcd_write+0x60>
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	c5 ff       	sbrs	r28, 5
  f4:	03 c0       	rjmp	.+6      	; 0xfc <lcd_write+0x6a>
  f6:	82 b3       	in	r24, 0x12	; 18
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	82 bb       	out	0x12, r24	; 18
  fc:	c4 ff       	sbrs	r28, 4
  fe:	03 c0       	rjmp	.+6      	; 0x106 <lcd_write+0x74>
 100:	82 b3       	in	r24, 0x12	; 18
 102:	80 61       	ori	r24, 0x10	; 16
 104:	82 bb       	out	0x12, r24	; 18
 106:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	8f 77       	andi	r24, 0x7F	; 127
 10e:	82 bb       	out	0x12, r24	; 18
 110:	82 b3       	in	r24, 0x12	; 18
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	82 bb       	out	0x12, r24	; 18
 116:	82 b3       	in	r24, 0x12	; 18
 118:	8f 7d       	andi	r24, 0xDF	; 223
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	8f 7e       	andi	r24, 0xEF	; 239
 120:	82 bb       	out	0x12, r24	; 18
 122:	c3 ff       	sbrs	r28, 3
 124:	03 c0       	rjmp	.+6      	; 0x12c <lcd_write+0x9a>
 126:	82 b3       	in	r24, 0x12	; 18
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	82 bb       	out	0x12, r24	; 18
 12c:	c2 ff       	sbrs	r28, 2
 12e:	03 c0       	rjmp	.+6      	; 0x136 <lcd_write+0xa4>
 130:	82 b3       	in	r24, 0x12	; 18
 132:	80 64       	ori	r24, 0x40	; 64
 134:	82 bb       	out	0x12, r24	; 18
 136:	c1 ff       	sbrs	r28, 1
 138:	03 c0       	rjmp	.+6      	; 0x140 <lcd_write+0xae>
 13a:	82 b3       	in	r24, 0x12	; 18
 13c:	80 62       	ori	r24, 0x20	; 32
 13e:	82 bb       	out	0x12, r24	; 18
 140:	c0 ff       	sbrs	r28, 0
 142:	03 c0       	rjmp	.+6      	; 0x14a <lcd_write+0xb8>
 144:	82 b3       	in	r24, 0x12	; 18
 146:	80 61       	ori	r24, 0x10	; 16
 148:	82 bb       	out	0x12, r24	; 18
 14a:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 14e:	82 b3       	in	r24, 0x12	; 18
 150:	80 61       	ori	r24, 0x10	; 16
 152:	82 bb       	out	0x12, r24	; 18
 154:	82 b3       	in	r24, 0x12	; 18
 156:	80 62       	ori	r24, 0x20	; 32
 158:	82 bb       	out	0x12, r24	; 18
 15a:	82 b3       	in	r24, 0x12	; 18
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	82 bb       	out	0x12, r24	; 18
 160:	82 b3       	in	r24, 0x12	; 18
 162:	80 68       	ori	r24, 0x80	; 128
 164:	82 bb       	out	0x12, r24	; 18
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <lcd_read>:
 16a:	88 23       	and	r24, r24
 16c:	21 f0       	breq	.+8      	; 0x176 <lcd_read+0xc>
 16e:	82 b3       	in	r24, 0x12	; 18
 170:	88 60       	ori	r24, 0x08	; 8
 172:	82 bb       	out	0x12, r24	; 18
 174:	03 c0       	rjmp	.+6      	; 0x17c <lcd_read+0x12>
 176:	82 b3       	in	r24, 0x12	; 18
 178:	87 7f       	andi	r24, 0xF7	; 247
 17a:	82 bb       	out	0x12, r24	; 18
 17c:	85 b3       	in	r24, 0x15	; 21
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	85 bb       	out	0x15, r24	; 21
 182:	81 b3       	in	r24, 0x11	; 17
 184:	8f 7e       	andi	r24, 0xEF	; 239
 186:	81 bb       	out	0x11, r24	; 17
 188:	81 b3       	in	r24, 0x11	; 17
 18a:	8f 7d       	andi	r24, 0xDF	; 223
 18c:	81 bb       	out	0x11, r24	; 17
 18e:	81 b3       	in	r24, 0x11	; 17
 190:	8f 7b       	andi	r24, 0xBF	; 191
 192:	81 bb       	out	0x11, r24	; 17
 194:	81 b3       	in	r24, 0x11	; 17
 196:	8f 77       	andi	r24, 0x7F	; 127
 198:	81 bb       	out	0x11, r24	; 17
 19a:	82 b3       	in	r24, 0x12	; 18
 19c:	84 60       	ori	r24, 0x04	; 4
 19e:	82 bb       	out	0x12, r24	; 18
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_read+0x38>
 1a2:	84 99       	sbic	0x10, 4	; 16
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <lcd_read+0x40>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <lcd_read+0x42>
 1aa:	80 e1       	ldi	r24, 0x10	; 16
 1ac:	85 99       	sbic	0x10, 5	; 16
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	86 99       	sbic	0x10, 6	; 16
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	87 99       	sbic	0x10, 7	; 16
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	92 b3       	in	r25, 0x12	; 18
 1ba:	9b 7f       	andi	r25, 0xFB	; 251
 1bc:	92 bb       	out	0x12, r25	; 18
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_read+0x56>
 1c0:	92 b3       	in	r25, 0x12	; 18
 1c2:	94 60       	ori	r25, 0x04	; 4
 1c4:	92 bb       	out	0x12, r25	; 18
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_read+0x5e>
 1c8:	84 99       	sbic	0x10, 4	; 16
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	85 99       	sbic	0x10, 5	; 16
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	86 99       	sbic	0x10, 6	; 16
 1d2:	84 60       	ori	r24, 0x04	; 4
 1d4:	87 99       	sbic	0x10, 7	; 16
 1d6:	88 60       	ori	r24, 0x08	; 8
 1d8:	92 b3       	in	r25, 0x12	; 18
 1da:	9b 7f       	andi	r25, 0xFB	; 251
 1dc:	92 bb       	out	0x12, r25	; 18
 1de:	08 95       	ret

000001e0 <lcd_waitbusy>:
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_read>
 1e6:	88 23       	and	r24, r24
 1e8:	dc f3       	brlt	.-10     	; 0x1e0 <lcd_waitbusy>
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_waitbusy+0xe>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_read>
 1f8:	08 95       	ret

000001fa <lcd_command>:
 1fa:	cf 93       	push	r28
 1fc:	c8 2f       	mov	r28, r24
 1fe:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_waitbusy>
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	8c 2f       	mov	r24, r28
 206:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <lcd_clrscr>:
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
 214:	08 95       	ret

00000216 <lcd_putc>:
 216:	cf 93       	push	r28
 218:	c8 2f       	mov	r28, r24
 21a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_waitbusy>
 21e:	ca 30       	cpi	r28, 0x0A	; 10
 220:	49 f4       	brne	.+18     	; 0x234 <lcd_putc+0x1e>
 222:	80 34       	cpi	r24, 0x40	; 64
 224:	10 f4       	brcc	.+4      	; 0x22a <lcd_putc+0x14>
 226:	80 e4       	ldi	r24, 0x40	; 64
 228:	01 c0       	rjmp	.+2      	; 0x22c <lcd_putc+0x16>
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	80 58       	subi	r24, 0x80	; 128
 22e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
 232:	04 c0       	rjmp	.+8      	; 0x23c <lcd_putc+0x26>
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	8c 2f       	mov	r24, r28
 238:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 248:	81 b3       	in	r24, 0x11	; 17
 24a:	88 60       	ori	r24, 0x08	; 8
 24c:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 24e:	84 b3       	in	r24, 0x14	; 20
 250:	81 60       	ori	r24, 0x01	; 1
 252:	84 bb       	out	0x14, r24	; 20
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 254:	81 b3       	in	r24, 0x11	; 17
 256:	84 60       	ori	r24, 0x04	; 4
 258:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 25a:	81 b3       	in	r24, 0x11	; 17
 25c:	80 61       	ori	r24, 0x10	; 16
 25e:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 260:	81 b3       	in	r24, 0x11	; 17
 262:	80 62       	ori	r24, 0x20	; 32
 264:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 266:	81 b3       	in	r24, 0x11	; 17
 268:	80 64       	ori	r24, 0x40	; 64
 26a:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 26c:	81 b3       	in	r24, 0x11	; 17
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	81 bb       	out	0x11, r24	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 272:	80 e6       	ldi	r24, 0x60	; 96
 274:	96 ee       	ldi	r25, 0xE6	; 230
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_init+0x36>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 27a:	82 b3       	in	r24, 0x12	; 18
 27c:	80 62       	ori	r24, 0x20	; 32
 27e:	82 bb       	out	0x12, r24	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 280:	82 b3       	in	r24, 0x12	; 18
 282:	80 61       	ori	r24, 0x10	; 16
 284:	82 bb       	out	0x12, r24	; 18
    lcd_e_toggle();
 286:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 28a:	80 ee       	ldi	r24, 0xE0	; 224
 28c:	97 e4       	ldi	r25, 0x47	; 71
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_init+0x4e>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 292:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 296:	cb ee       	ldi	r28, 0xEB	; 235
 298:	d0 e0       	ldi	r29, 0x00	; 0
 29a:	ce 01       	movw	r24, r28
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x5c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 2a0:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2a4:	ce 01       	movw	r24, r28
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <lcd_init+0x66>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2aa:	82 b3       	in	r24, 0x12	; 18
 2ac:	8f 7e       	andi	r24, 0xEF	; 239
 2ae:	82 bb       	out	0x12, r24	; 18
    lcd_e_toggle();
 2b0:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2b4:	21 97       	sbiw	r28, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_init+0x74>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2b8:	88 e2       	ldi	r24, 0x28	; 40
 2ba:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2be:	88 e0       	ldi	r24, 0x08	; 8
 2c0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2c4:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2ce:	81 2f       	mov	r24, r17
 2d0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>

}/* lcd_init */
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	08 95       	ret

000002dc <main>:

#include <avr/io.h>
#include "lcd.h"

int main(void)
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	64 97       	sbiw	r28, 0x14	; 20
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
	lcd_init(LCD_DISP_ON_CURSOR_BLINK);
 2f0:	8f e0       	ldi	r24, 0x0F	; 15
 2f2:	0e 94 20 01 	call	0x240	; 0x240 <lcd_init>
	lcd_clrscr();
 2f6:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clrscr>
	
	char string[20] = "Hello World!";
 2fa:	8d e0       	ldi	r24, 0x0D	; 13
 2fc:	e0 e6       	ldi	r30, 0x60	; 96
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	de 01       	movw	r26, r28
 302:	11 96       	adiw	r26, 0x01	; 1
 304:	01 90       	ld	r0, Z+
 306:	0d 92       	st	X+, r0
 308:	8a 95       	dec	r24
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0x28>
 30c:	fe 01       	movw	r30, r28
 30e:	3e 96       	adiw	r30, 0x0e	; 14
 310:	87 e0       	ldi	r24, 0x07	; 7
 312:	df 01       	movw	r26, r30
 314:	1d 92       	st	X+, r1
 316:	8a 95       	dec	r24
 318:	e9 f7       	brne	.-6      	; 0x314 <main+0x38>
	int index = 0;
 31a:	00 e0       	ldi	r16, 0x00	; 0
 31c:	10 e0       	ldi	r17, 0x00	; 0
 31e:	04 c0       	rjmp	.+8      	; 0x328 <main+0x4c>
	
	// lcd_puts(string);
		
    while (1) {
		while(string[index] != '\0')
			lcd_putc(string[index++]);
 320:	0f 5f       	subi	r16, 0xFF	; 255
 322:	1f 4f       	sbci	r17, 0xFF	; 255
 324:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_putc>
	int index = 0;
	
	// lcd_puts(string);
		
    while (1) {
		while(string[index] != '\0')
 328:	e1 e0       	ldi	r30, 0x01	; 1
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	ec 0f       	add	r30, r28
 32e:	fd 1f       	adc	r31, r29
 330:	e0 0f       	add	r30, r16
 332:	f1 1f       	adc	r31, r17
 334:	80 81       	ld	r24, Z
 336:	81 11       	cpse	r24, r1
 338:	f3 cf       	rjmp	.-26     	; 0x320 <main+0x44>
 33a:	f6 cf       	rjmp	.-20     	; 0x328 <main+0x4c>

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
