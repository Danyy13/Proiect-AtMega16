
work6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071e  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000670  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ef  00000000  00000000  00000f86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000369  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fa  00000000  00000000  0000165d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001757  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_init>:

#include <avr/io.h>
#include <util/delay.h>

void USART_init() {
	DDRD = 0x02; // output PD1 = TX
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	81 bb       	out	0x11, r24	; 17
	
	UCSRC &= ~(1 << URSEL); // am acces la UBRRH
  70:	80 b5       	in	r24, 0x20	; 32
  72:	8f 77       	andi	r24, 0x7F	; 127
  74:	80 bd       	out	0x20, r24	; 32
	UBRRH = 0x00;
  76:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0x5F;
  78:	8f e5       	ldi	r24, 0x5F	; 95
  7a:	89 b9       	out	0x09, r24	; 9
	
	UCSRA &= ~0x03;
  7c:	8b b1       	in	r24, 0x0b	; 11
  7e:	8c 7f       	andi	r24, 0xFC	; 252
  80:	8b b9       	out	0x0b, r24	; 11
	
	UCSRB = (1 << TXEN) | (1 << RXEN);
  82:	88 e1       	ldi	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC = 1 << URSEL | (1 << UCSZ0) | (1 << UCSZ1);
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
  8a:	08 95       	ret

0000008c <register_empty>:
}

int register_empty() {
	return UCSRA & (1 << UDRE);
  8c:	8b b1       	in	r24, 0x0b	; 11
  8e:	80 72       	andi	r24, 0x20	; 32
}
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	08 95       	ret

00000094 <send_char>:

void send_char(char data) {
  94:	cf 93       	push	r28
  96:	c8 2f       	mov	r28, r24
	while(!register_empty());
  98:	0e 94 46 00 	call	0x8c	; 0x8c <register_empty>
  9c:	89 2b       	or	r24, r25
  9e:	e1 f3       	breq	.-8      	; 0x98 <send_char+0x4>
	UDR = data;
  a0:	cc b9       	out	0x0c, r28	; 12
}
  a2:	cf 91       	pop	r28
  a4:	08 95       	ret

000000a6 <get_char>:

void get_char(char *data) {
	while(!(UCSRA & (1 << RXC)));
  a6:	5f 9b       	sbis	0x0b, 7	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <get_char>
	*data = UDR;
  aa:	2c b1       	in	r18, 0x0c	; 12
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
  b0:	08 95       	ret

000000b2 <main>:
}

int main(void)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	1f 92       	push	r1
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	USART_init();
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <USART_init>
	DDRB = 1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	87 bb       	out	0x17, r24	; 23

	char data = 'a', buffer = 0;
  c4:	81 e6       	ldi	r24, 0x61	; 97
  c6:	89 83       	std	Y+1, r24	; 0x01
  c8:	10 e0       	ldi	r17, 0x00	; 0
	
    while (1) {
		get_char(&data);
  ca:	ce 01       	movw	r24, r28
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	0e 94 53 00 	call	0xa6	; 0xa6 <get_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	9c e2       	ldi	r25, 0x2C	; 44
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x26>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x30>
  e2:	00 00       	nop
		_delay_ms(1000);
		if(buffer != data)
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	18 17       	cp	r17, r24
  e8:	81 f3       	breq	.-32     	; 0xca <main+0x18>
		{
			
			if(buffer != data)
  ea:	18 13       	cpse	r17, r24
			send_char(data);
  ec:	0e 94 4a 00 	call	0x94	; 0x94 <send_char>
			buffer = data;
  f0:	19 81       	ldd	r17, Y+1	; 0x01
  f2:	eb cf       	rjmp	.-42     	; 0xca <main+0x18>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
