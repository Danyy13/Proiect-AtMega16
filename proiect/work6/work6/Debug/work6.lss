
work6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000015a  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  000001f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000934  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000758  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e1  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  0000186c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dc  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000172  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001ec2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
extern unsigned char data;
extern unsigned char flag;

int main(void)
{
	USART_init();
  92:	0e 94 84 00 	call	0x108	; 0x108 <USART_init>
	initDigit();
  96:	0e 94 a3 00 	call	0x146	; 0x146 <initDigit>
    while (1) {
		/*sprintf(string, "ana are mere %lu\n", index);
		index++;
		sendString(string); */
		
		sei();
  9a:	78 94       	sei
		
		while(!flag);
  9c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  a0:	88 23       	and	r24, r24
  a2:	e1 f3       	breq	.-8      	; 0x9c <main+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	8f e7       	ldi	r24, 0x7F	; 127
  a8:	96 e1       	ldi	r25, 0x16	; 22
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x22>
  b4:	00 00       	nop
		// data = getChar();
		_delay_ms(500);
		sendChar(data);
  b6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <data>
  ba:	0e 94 9a 00 	call	0x134	; 0x134 <sendChar>
		if(data >= '0' && data <= '9') {
  be:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <data>
  c2:	80 53       	subi	r24, 0x30	; 48
  c4:	8a 30       	cpi	r24, 0x0A	; 10
  c6:	50 f4       	brcc	.+20     	; 0xdc <main+0x4a>
			clearDigit();
  c8:	0e 94 a8 00 	call	0x150	; 0x150 <clearDigit>
			displayDigit(digitMap[data - '0']);
  cc:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <data>
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	e0 5d       	subi	r30, 0xD0	; 208
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	80 81       	ld	r24, Z
  d8:	0e 94 a6 00 	call	0x14c	; 0x14c <displayDigit>
		}
		flag = 0;
  dc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
		
		cli();
  e0:	f8 94       	cli
		/*if(buffer != data) {
			//if(buffer != data)
			sendChar(data);
			buffer = data;
		}*/
    }
  e2:	db cf       	rjmp	.-74     	; 0x9a <main+0x8>

000000e4 <__vector_11>:
#include <avr/interrupt.h>

volatile unsigned char data = 0;
volatile unsigned char flag = 0;

ISR(USART_RXC_vect) {
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
	data = UDR;
  f0:	8c b1       	in	r24, 0x0c	; 12
  f2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <data>
	flag = 1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
}
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <USART_init>:

void USART_init() {
	DDRD = 0x02; // output PD1 = TX
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	81 bb       	out	0x11, r24	; 17
	
	UCSRC &= ~(1 << URSEL); // am acces la UBRRH
 10c:	80 b5       	in	r24, 0x20	; 32
 10e:	8f 77       	andi	r24, 0x7F	; 127
 110:	80 bd       	out	0x20, r24	; 32
	UBRRH = 0x00;
 112:	10 bc       	out	0x20, r1	; 32
	//UBRRL = 0x5F; // pentru BAUD 9600
	UBRRL = 0x07;
 114:	87 e0       	ldi	r24, 0x07	; 7
 116:	89 b9       	out	0x09, r24	; 9
	
	UCSRA &= ~0x03;
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	8c 7f       	andi	r24, 0xFC	; 252
 11c:	8b b9       	out	0x0b, r24	; 11
	
	// UCSRB = (1 << TXEN) | (1 << RXEN); // fara interrupt
	UCSRB = (1 << TXEN) | (1 << RXEN) | (1 << RXCIE); // cu interrupt
 11e:	88 e9       	ldi	r24, 0x98	; 152
 120:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC = 1 << URSEL | (1 << UCSZ0) | (1 << UCSZ1);
 122:	86 e8       	ldi	r24, 0x86	; 134
 124:	80 bd       	out	0x20, r24	; 32
	
	SREG = (1 << 7);
 126:	80 e8       	ldi	r24, 0x80	; 128
 128:	8f bf       	out	0x3f, r24	; 63
 12a:	08 95       	ret

0000012c <register_empty>:
}

int register_empty() {
	return UCSRA & (1 << UDRE);
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	80 72       	andi	r24, 0x20	; 32
}
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	08 95       	ret

00000134 <sendChar>:

void sendChar(char data) {
 134:	cf 93       	push	r28
 136:	c8 2f       	mov	r28, r24
	while(!register_empty());
 138:	0e 94 96 00 	call	0x12c	; 0x12c <register_empty>
 13c:	89 2b       	or	r24, r25
 13e:	e1 f3       	breq	.-8      	; 0x138 <sendChar+0x4>
	UDR = data;
 140:	cc b9       	out	0x0c, r28	; 12
}
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <initDigit>:
#include <avr/io.h>
#include <stdint.h>
#include <util/delay.h>

void initDigit() {
	DDRA = 0xFF;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	8a bb       	out	0x1a, r24	; 26
 14a:	08 95       	ret

0000014c <displayDigit>:
}

void displayDigit(uint8_t digit) {
	PORTA = digit;
 14c:	8b bb       	out	0x1b, r24	; 27
 14e:	08 95       	ret

00000150 <clearDigit>:
}

void clearDigit() {
	PORTA = 0xFF;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	8b bb       	out	0x1b, r24	; 27
 154:	08 95       	ret

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
