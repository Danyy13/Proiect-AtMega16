
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d5  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00000e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000346  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cf  00000000  00000000  0000149e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000156d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
    /* Replace with your application code */
	unsigned char currentLED = 0; // LED-ul curent pe care il aprindem
	
	// set PORTA as output
	for(unsigned int i=0;i<ledNumber;i++) {
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	0d c0       	rjmp	.+26     	; 0x8c <main+0x20>
		DDRA |= 1 << i;
  72:	4a b3       	in	r20, 0x1a	; 26
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 2e       	mov	r0, r18
  7a:	02 c0       	rjmp	.+4      	; 0x80 <main+0x14>
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	0a 94       	dec	r0
  82:	e2 f7       	brpl	.-8      	; 0x7c <main+0x10>
  84:	84 2b       	or	r24, r20
  86:	8a bb       	out	0x1a, r24	; 26
{
    /* Replace with your application code */
	unsigned char currentLED = 0; // LED-ul curent pe care il aprindem
	
	// set PORTA as output
	for(unsigned int i=0;i<ledNumber;i++) {
  88:	2f 5f       	subi	r18, 0xFF	; 255
  8a:	3f 4f       	sbci	r19, 0xFF	; 255
  8c:	28 30       	cpi	r18, 0x08	; 8
  8e:	31 05       	cpc	r19, r1
  90:	80 f3       	brcs	.-32     	; 0x72 <main+0x6>
		DDRA |= 1 << i;
	}
	
	// set PORTB as input
	DDRB = ~5; // 11111010
  92:	8a ef       	ldi	r24, 0xFA	; 250
  94:	87 bb       	out	0x17, r24	; 23
#define DOWN (PINB >> 2) & 1

int main(void)
{
    /* Replace with your application code */
	unsigned char currentLED = 0; // LED-ul curent pe care il aprindem
  96:	20 e0       	ldi	r18, 0x00	; 0
	// set PORTB as input
	DDRB = ~5; // 11111010
	
	while (1)
    {
		if(UP) {
  98:	b0 9b       	sbis	0x16, 0	; 22
  9a:	07 c0       	rjmp	.+14     	; 0xaa <main+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	81 ee       	ldi	r24, 0xE1	; 225
  9e:	92 e0       	ldi	r25, 0x02	; 2
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x34>
  a4:	00 00       	nop
			_delay_ms(0.2);
			if(UP)
  a6:	b0 99       	sbic	0x16, 0	; 22
				currentLED++;
  a8:	2f 5f       	subi	r18, 0xFF	; 255
		}
		if(DOWN) {
  aa:	b2 9b       	sbis	0x16, 2	; 22
  ac:	07 c0       	rjmp	.+14     	; 0xbc <main+0x50>
  ae:	81 ee       	ldi	r24, 0xE1	; 225
  b0:	92 e0       	ldi	r25, 0x02	; 2
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x46>
  b6:	00 00       	nop
			_delay_ms(0.2);
			if(DOWN)
  b8:	b2 99       	sbic	0x16, 2	; 22
				currentLED--;
  ba:	21 50       	subi	r18, 0x01	; 1
		}
		currentLED %= 8;
  bc:	27 70       	andi	r18, 0x07	; 7
		PORTA = ~(1 << currentLED);
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x5e>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x5a>
  ce:	80 95       	com	r24
  d0:	8b bb       	out	0x1b, r24	; 27
  d2:	9f ef       	ldi	r25, 0xFF	; 255
  d4:	3f e7       	ldi	r19, 0x7F	; 127
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	91 50       	subi	r25, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x6c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x76>
  e2:	00 00       	nop
  e4:	d9 cf       	rjmp	.-78     	; 0x98 <main+0x2c>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
